@model IEnumerable<AlcaldiaFront.DTOs.MunicipioDTOs.MunicipioRespuestaDTO>
@{
    ViewData["Title"] = "Listado de Municipios";
    int pageSize = 5; // Define cuántos elementos quieres por página
}

@* Incluimos Font Awesome para los iconos *@
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />

<style>
    /* --------------------------------------------------
            PATRÓN DE COLORES FORMAL ADAPTADO (Antracita/Dorado)
            -------------------------------------------------- */
    :root {
        --color-primario: #34495e; /* Azul Marino/Antracita */
        --color-secundario: #f39c12; /* Dorado/Naranja - Acento */
        --color-fondo-claro: #ecf0f1;
        --color-texto: #2c3e50;
    }

    /* Contenedor principal */
    .data-card {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    /* Encabezado principal */
    h1 {
        color: var(--color-primario);
        border-left: 5px solid var(--color-secundario);
        padding-left: 15px;
        margin-bottom: 25px;
    }

    /* Botón Crear Nuevo */
    .btn-primary {
        background-color: var(--color-primario);
        border-color: var(--color-primario);
        transition: background-color 0.3s;
    }

        .btn-primary:hover {
            background-color: #4b6279; /* Tono más claro del primario */
            border-color: #4b6279;
        }

    /* Estilo de la tabla */
    .table-striped > tbody > tr:nth-of-type(odd) {
        background-color: var(--color-fondo-claro);
    }

    .table thead th {
        background-color: var(--color-primario);
        color: white;
        border-bottom: 3px solid var(--color-secundario);
        font-weight: 600;
        vertical-align: middle;
        text-align: center;
    }

    .table tbody td {
        vertical-align: middle;
        font-size: 0.95rem;
    }

    /* Estilos para los botones de la paginación */
    .pagination-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .page-item .page-link {
        color: var(--color-primario);
        border-color: var(--color-primario);
        transition: background-color 0.3s, color 0.3s;
    }

    .page-item.active .page-link {
        background-color: var(--color-secundario);
        border-color: var(--color-secundario);
        color: white;
        font-weight: bold;
    }

    /* Estilos responsive específicos para acciones en móviles */
    @@media (max-width: 768px) {
        .action-buttons a {
            margin: 2px;
        }

        .table thead th:nth-child(1), .table tbody td:nth-child(1) {
            min-width: 120px; /* Asegura espacio para el nombre */
        }

        .table thead th:nth-child(2), .table tbody td:nth-child(2) {
            min-width: 150px; /* Asegura espacio para el municipio */
        }
    }
</style>

<div class="data-card">

    <h1><i class="fas fa-city text-secondary"></i> @ViewData["Title"]</h1>
    <p>
        <a asp-action="Create" class="btn btn-primary"><i class="fas fa-plus-circle"></i> Crear Nuevo Municipio</a>
    </p>

    @if (ViewBag.Error != null)
    {
        <div class="alert alert-danger" role="alert">
            @ViewBag.Error
        </div>
    }

    <div class="table-responsive">
        <table class="table table-hover table-striped" id="municipiosTable">
            <thead>
                <tr>
                    <th>
                        Nombre de municipio
                    </th>
                    <th style="width: 150px;" class="text-center">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null)
                {
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.Nombre_Municipio)</td>
                            <td class="text-center action-buttons">
                                <a asp-action="Edit" asp-route-id="@item.Id_Municipio" class="btn btn-sm btn-outline-primary" title="Editar"><i class="fas fa-edit"></i></a>
                                <a asp-action="Details" asp-route-id="@item.Id_Municipio" class="btn btn-sm btn-outline-info" title="Detalles"><i class="fas fa-info-circle"></i></a>
                                <a asp-action="Delete" asp-route-id="@item.Id_Municipio" class="btn btn-sm btn-outline-danger" title="Eliminar"><i class="fas fa-trash-alt"></i></a>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <nav class="pagination-container" aria-label="Navegación de Municipios">
        <ul class="pagination" id="pagination-ul"></ul>
    </nav>

    @if (Model == null || !Model.Any())
    {
        <div class="alert alert-info text-center mt-4" role="alert">
            <h4>No hay municipios registrados</h4>
            <p>Comienza creando el primer municipio.</p>
            <a asp-action="Create" class="btn btn-primary">Crear Primer Municipio</a>
        </div>
    }

</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Configuración de Paginación
            const table = document.getElementById('municipiosTable');
            const tbody = table.querySelector('tbody');
            // Si Model es nulo o vacío, rows será vacío y se mostrará el mensaje de "No hay municipios registrados"
            const rows = tbody ? Array.from(tbody.querySelectorAll('tr')) : [];
            const pageSize = @pageSize; // Viene de la variable Razor
            const totalPages = Math.ceil(rows.length / pageSize);
            const paginationUl = $('#pagination-ul');

            function displayPage(page) {
                const startIndex = (page - 1) * pageSize;
                const endIndex = startIndex + pageSize;

                rows.forEach((row, index) => {
                    row.style.display = (index >= startIndex && index < endIndex) ? '' : 'none';
                });

                updatePaginationControls(page);
            }

            function updatePaginationControls(currentPage) {
                paginationUl.empty(); // Limpiar la paginación existente

                if (totalPages <= 1) return; // No mostrar paginación si solo hay una página

                // Botón Anterior
                const prevDisabled = currentPage === 1 ? 'disabled' : '';
                paginationUl.append(`
                    <li class="page-item ${prevDisabled}">
                        <a class="page-link" href="#" data-page="${currentPage - 1}"><i class="fas fa-angle-left"></i> Anterior</a>
                    </li>
                `);

                // Botones de Páginas Numeradas
                for (let i = 1; i <= totalPages; i++) {
                    const active = i === currentPage ? 'active' ? (i === currentPage ? 'active' : '');
                    paginationUl.append(`
                        <li class="page-item ${active}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>
                    `);
                }

                // Botón Siguiente
                const nextDisabled = currentPage === totalPages ? 'disabled' : '';
                paginationUl.append(`
                    <li class="page-item ${nextDisabled}">
                        <a class="page-link" href="#" data-page="${currentPage + 1}">Siguiente <i class="fas fa-angle-right"></i></a>
                    </li>
                `);
            }

            // Manejador de clic para los botones de paginación
            paginationUl.on('click', 'a.page-link', function (e) {
                e.preventDefault();
                // Si el elemento padre está deshabilitado, no hacer nada
                if ($(this).parent().hasClass('disabled')) return;

                const newPage = parseInt($(this).data('page'));

                if (!isNaN(newPage) && newPage >= 1 && newPage <= totalPages) {
                    displayPage(newPage);
                }
            });

            // Inicializar la tabla y la paginación en la página 1
            if (rows.length > 0) {
                displayPage(1);
            }
        });
    </script>
}