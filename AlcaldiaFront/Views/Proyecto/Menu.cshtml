@model IEnumerable<AlcaldiaFront.DTOs.ProyectoDTOs.ProyectoRespuestaDTo>
@using System.Collections.Generic
@{
    ViewData["Title"] = "Listado de Proyectos";
    // Nota: Es mejor definir las variables de color en el _Layout.cshtml,
    // pero las incluimos aquí para la autonomía de la vista.
    Dictionary<int, string> municipioNombres = ViewBag.MunicipioNombres as Dictionary<int, string>;
    int pageSize = 5; // Define cuántos elementos quieres por página
}

<style>
    /* --------------------------------------------------
           PATRÓN DE COLORES FORMAL ADAPTADO (Antracita/Dorado)
           -------------------------------------------------- */
    :root {
        --color-primario: #34495e; /* Azul Marino/Antracita */
        --color-secundario: #f39c12; /* Dorado/Naranja - Acento */
        --color-fondo-claro: #ecf0f1;
        --color-texto: #2c3e50;
    }

    /* Contenedor principal */
    .data-card {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    /* Encabezado principal */
    h1 {
        color: var(--color-primario);
        border-left: 5px solid var(--color-secundario);
        padding-left: 15px;
        margin-bottom: 25px;
    }

    /* Botón Crear Nuevo */
    .btn-primary {
        background-color: var(--color-primario);
        border-color: var(--color-primario);
        transition: background-color 0.3s;
    }

        .btn-primary:hover {
            background-color: #4b6279; /* Tono más claro del primario */
            border-color: #4b6279;
        }

    /* Estilo de la tabla */
    .table-striped > tbody > tr:nth-of-type(odd) {
        background-color: var(--color-fondo-claro);
    }

    .table thead th {
        background-color: var(--color-primario);
        color: white;
        border-bottom: 3px solid var(--color-secundario);
        font-weight: 600;
        vertical-align: middle;
        text-align: center;
    }

    .table tbody td {
        vertical-align: middle;
        font-size: 0.95rem;
    }

    /* Estilos para los botones de la paginación */
    .pagination-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .page-item .page-link {
        color: var(--color-primario);
        border-color: var(--color-primario);
        transition: background-color 0.3s, color 0.3s;
    }

    .page-item.active .page-link {
        background-color: var(--color-secundario);
        border-color: var(--color-secundario);
        color: white;
        font-weight: bold;
    }
</style>

<div class="data-card">

    <h1><i class="fas fa-tasks text-secondary"></i> @ViewData["Title"]</h1>
    <p>
        <a asp-controller="Home"  asp-action="Index" class="btn btn-primary"><i class="fas fa-plus-circle"></i> Volver al menu</a>
    </p>

    @if (ViewBag.Error != null)
    {
        <div class="alert alert-danger" role="alert">
            @ViewBag.Error
        </div>
    }

    <div class="table-responsive">
        <table class="table table-hover" id="proyectosTable">
            <thead>
                <tr>
                    <th>Proyecto</th>
                    <th>Proposito</th>
                    <th class="text-center">Inicio</th>
                    <th class="text-center">Finalización</th>
                    <th class="text-right">Presupuesto</th>
                    <th class="text-center">Estado</th>
                    <th>Municipio</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.Nombre)</td>
                        <td>
                            @if (!string.IsNullOrEmpty(item.Descripcion) && item.Descripcion.Length > 50)
                            {
                                @(item.Descripcion.Substring(0, 50) + "...")
                            }
                            else
                            {
                                @Html.DisplayFor(modelItem => item.Descripcion)
                            }
                        </td>
                        <td class="text-center">@Html.DisplayFor(modelItem => item.Fecha_Inicio)</td>
                        <td class="text-center">@Html.DisplayFor(modelItem => item.Fecha_Fin)</td>
                        <td class="text-right">$@Html.DisplayFor(modelItem => item.Presupuesto)</td>
                        <td class="text-center">
                            @{
                                string badgeClass = item.Estado switch
                                {
                                    "finalizado" => "success",
                                    "en_ejecucion" => "primary",
                                    "planificado" => "info",
                                    "cancelado" => "danger",
                                    _ => "secondary"
                                };
                            }
                            <span class="badge bg-@badgeClass">
                                @Html.DisplayFor(modelItem => item.Estado)
                            </span>
                        </td>
                        <td>
                            @{
                                string nombreMunicipio = "N/A";
                                if (municipioNombres != null && municipioNombres.ContainsKey(item.MunicipioId))
                                {
                                    nombreMunicipio = municipioNombres[item.MunicipioId];
                                }
                            }
                            @nombreMunicipio
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <nav class="pagination-container" aria-label="Navegación de Proyectos">
        <ul class="pagination" id="pagination-ul"></ul>
    </nav>

    @if (Model != null && !Model.Any())
    {
        <div class="alert alert-info text-center mt-4" role="alert">
            <h4>No hay proyectos registrados</h4>
            <p>Comienza creando tu primer proyecto.</p>
            <a asp-action="Create" class="btn btn-primary">Crear Primer Proyecto</a>
        </div>
    }

</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Configuración de Paginación
            const table = document.getElementById('proyectosTable');
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));
            const pageSize = @pageSize; // Viene de la variable Razor
            const totalPages = Math.ceil(rows.length / pageSize);
            const paginationUl = $('#pagination-ul');

            function displayPage(page) {
                const startIndex = (page - 1) * pageSize;
                const endIndex = startIndex + pageSize;

                rows.forEach((row, index) => {
                    row.style.display = (index >= startIndex && index < endIndex) ? '' : 'none';
                });

                updatePaginationControls(page);
            }

            function updatePaginationControls(currentPage) {
                paginationUl.empty(); // Limpiar la paginación existente

                // Botón Anterior
                const prevDisabled = currentPage === 1 ? 'disabled' : '';
                paginationUl.append(`
                    <li class="page-item ${prevDisabled}">
                        <a class="page-link" href="#" data-page="${currentPage - 1}"><i class="fas fa-angle-left"></i> Anterior</a>
                    </li>
                `);

                // Botones de Páginas Numeradas
                for (let i = 1; i <= totalPages; i++) {
                    const active = i === currentPage ? 'active' : '';
                    paginationUl.append(`
                        <li class="page-item ${active}">
                            <a class="page-link" href="#" data-page="${i}">${i}</a>
                        </li>
                    `);
                }

                // Botón Siguiente
                const nextDisabled = currentPage === totalPages ? 'disabled' : '';
                paginationUl.append(`
                    <li class="page-item ${nextDisabled}">
                        <a class="page-link" href="#" data-page="${currentPage + 1}">Siguiente <i class="fas fa-angle-right"></i></a>
                    </li>
                `);
            }

            // Manejador de clic para los botones de paginación
            paginationUl.on('click', 'a.page-link', function (e) {
                e.preventDefault();
                const newPage = parseInt($(this).data('page'));

                if (!isNaN(newPage) && newPage >= 1 && newPage <= totalPages) {
                    displayPage(newPage);
                }
            });

            // Inicializar la tabla y la paginación en la página 1
            if (rows.length > 0) {
                displayPage(1);
            }
        });
    </script>
}